{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleNumberClick","number","stateArr","state","activeValue","inputDisplayArr","slice","setState","i","length","push","handleOperatorClick","operator","joined","join","joinedNumber","Number","activeOperator","operatorSymbol","react_default","a","createElement","className","value","handleEqualClick","_this$state","splitAdded","toString","split","splitSubtracted","splitMultiplied","splitDivided","clearInput","lastNumber","inputDisplay","_this2","_this$state2","class","type","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.698ac540.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super() \n    this.state = {\n      inputDisplayArr: [0],\n      lastNumber: 0,\n      activeOperator: null,\n      operatorSymbol: '',\n      activeValue: 0,\n      value: 0\n    }\n  }\n  handleNumberClick = (number) => {\n    let stateArr;\n    if (this.state.activeValue === 0) {\n    stateArr = this.state.inputDisplayArr.slice()\n    } else {\n      stateArr = [0]\n      this.setState({\n        activeValue: 0\n      })\n    }\n    \n    if ( (number === 0 || number === 'dbl') && stateArr[0] === 0 && stateArr[1] !== '.') {\n      return\n    }\n    for (let i = 0; i < stateArr.length; i++) {\n      if (stateArr[i] === '.' && number === '.')\n      return \n      \n    }\n    if(stateArr[0] === 0  &&  number !== '.' && (number !== 0 || number !== 'dbl') && stateArr[1] !== '.') {\n        stateArr = []\n        stateArr.push(number) \n        this.setState ({\n        inputDisplayArr: stateArr\n      })\n    } else if(number === 'dbl')  {\n      stateArr.push(0)\n      stateArr.push(0) \n      this.setState ({\n      inputDisplayArr: stateArr\n      })\n    }else  {\n      stateArr.push(number) \n      this.setState ({\n        inputDisplayArr: stateArr,\n\n      })\n    }\n  }\n  handleOperatorClick = (operator) => {\n    let num = this.state.inputDisplayArr.slice()\n    let joined = num.join('')\n    let joinedNumber = Number(joined)\n    \n    switch(operator) {\n      case 'divide':\n      this.setState({\n        activeOperator: 'divide',\n        operatorSymbol: <i className=\"fas fa-divide\"></i>,\n        activeValue: joinedNumber,\n        value: joinedNumber\n      })\n      break;\n      case 'times':\n      this.setState({\n        activeOperator: 'times',\n        operatorSymbol:  <i className=\"fas fa-times\"></i>,\n        activeValue: joinedNumber,\n        value: joinedNumber\n      })\n      break;\n      case 'minus':\n      this.setState({\n        activeOperator: 'minus',\n        operatorSymbol:  <i className=\"fas fa-minus\"></i>,\n        activeValue: joinedNumber,\n        value: joinedNumber\n      })\n      break;\n      case 'plus':\n      this.setState({\n        activeOperator: 'plus',\n        operatorSymbol:  <i className=\"fas fa-plus\"></i>,\n        activeValue: joinedNumber,\n        value: joinedNumber\n      })\n      break; \n      \n      default:\n      break;\n    }\n    \n  }\n  handleEqualClick = () => {\n    const {activeOperator, value} = this.state\n    let num = this.state.inputDisplayArr.slice()\n    let joined = num.join('')\n    let joinedNumber = Number(joined)\n\n    switch(activeOperator) {\n      case 'plus':\n      let added = value + joinedNumber\n      let splitAdded = added.toString().split('')\n      this.setState({\n        inputDisplayArr: splitAdded,\n        activeOperator: null,\n        operatorSymbol: ''\n      })\n      break;\n\n      case 'minus':\n      let subtracted = value - joinedNumber\n      let splitSubtracted = subtracted.toString().split('')\n      this.setState({\n        inputDisplayArr: splitSubtracted,\n        activeOperator: null,\n        operatorSymbol: ''\n      })\n      break;\n\n      case 'times':\n      let multiplied = value * joinedNumber\n      let splitMultiplied = multiplied.toString().split('')\n      this.setState({\n        inputDisplayArr: splitMultiplied,\n        activeOperator: null,\n        operatorSymbol: ''\n      })\n      break;\n\n      case 'divide':\n      let divided = value / joinedNumber\n      let splitDivided = divided.toString().split('')\n      this.setState({\n        inputDisplayArr: splitDivided,\n        activeOperator: null,\n        operatorSymbol: ''\n      })\n      break;\n\n      default:\n      break;\n    }\n  }\n  clearInput = () => {\n    this.setState({\n      inputDisplayArr: [0],\n      activeOperator: null,\n      operatorSymbol: ''\n    })\n  }\n  render() {\n    const {inputDisplayArr, activeOperator, operatorSymbol} = this.state\n    let inputDisplay;\n    if (inputDisplayArr.length > 10) {\n      inputDisplay = inputDisplayArr.slice(0,9).join('')\n    } else {\n       inputDisplay = inputDisplayArr.join('')\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"calc-box\">\n        <div className=\"title-box\">\n          <h1>React <i class=\"fab fa-react\"></i> Calculator</h1>\n          {/* <h1>React.js Calculator</h1> */}\n        </div>\n          <div className=\"calc-container\">\n            <div className=\"screen-box\">\n              <div className=\"operator-box\">\n              {!activeOperator? '' : operatorSymbol}\n              </div>\n              <input type=\"text\" className=\"screen\" value={inputDisplay}/>\n            </div>\n            <div className=\"keypad-box\">\n                <button className=\"num-button\" onClick={() => this.handleNumberClick(7)}>7</button>\n                <button className=\"num-button\" onClick={() => this.handleNumberClick(8)}>8</button>\n                <button className=\"num-button\" onClick={() => this.handleNumberClick(9)}>9</button>\n                <button className=\"operator-button\" onClick={() => this.handleOperatorClick('divide')}>&#247;</button>\n            </div>\n            <div className=\"keypad-box\">\n                <button className=\"num-button\" onClick={() => this.handleNumberClick(4)}>4</button>\n                <button className=\"num-button\" onClick={() => this.handleNumberClick(5)}>5</button>\n                <button className=\"num-button\" onClick={() => this.handleNumberClick(6)}>6</button>\n                <button className=\"operator-button\" onClick={() => this.handleOperatorClick('times')}>&#215;</button>\n            </div>\n            <div className=\"keypad-box\">\n                <button className=\"num-button\" onClick={() => this.handleNumberClick(1)}>1</button>\n                <button className=\"num-button\" onClick={() => this.handleNumberClick(2)}>2</button>\n                <button className=\"num-button\" onClick={() => this.handleNumberClick(3)}>3</button>\n                <button className=\"operator-button\" onClick={() => this.handleOperatorClick('minus')}>&#8722;</button>\n            </div>\n            <div className=\"keypad-box\">\n                <button className=\"num-button\" onClick={() => this.handleNumberClick(0)}>0</button>\n                <button className=\"num-button dbl-zero-btn\" onClick={() => this.handleNumberClick(\"dbl\")}>00</button>\n                <button onClick={() => this.handleNumberClick('.')} className=\"num-button\">.</button>\n                <button className=\"operator-button\" onClick={() => this.handleOperatorClick('plus')}>&#43;</button>\n            </div>\n            <div className=\"eql-btn-box\">\n              <button className=\"clear-btn\" onClick={this.clearInput}>C</button>\n              <button className=\"equal-btn\" onClick={this.handleEqualClick}>&#61;</button>\n              <div className=\"fakey-box\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}